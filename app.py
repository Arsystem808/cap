# -*- coding: utf-8 -*-
import streamlit as st
import yfinance as yf
import pandas as pd
from core_strategy import decide
from narrator import humanize
from backtest import run_backtest

st.set_page_config(page_title="CapinteL-Q AI", page_icon="üìà", layout="centered")

st.title("CapinteL-Q AI ‚Äî –∂–∏–≤–æ–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")


# --- Input ---
col1, col2 = st.columns([2,1])
with col1:
    ticker = st.text_input("–¢–∏–∫–µ—Ä", value="QQQ").upper().strip()
with col2:
    horizon_label = st.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç",
        ["–ê–≤—Ç–æ", "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ–∫ (1‚Äì10 –¥–Ω.)","–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (2‚Äì8 –Ω–µ–¥.)","–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å.)"])

period = st.selectbox("–ü–µ—Ä–∏–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏", ["1 –≥–æ–¥","3 –≥–æ–¥–∞","5 –ª–µ—Ç"], index=1)

def map_hz(h):
    if h.startswith("–ö—Ä–∞—Ç–∫"): return "ST"
    if h.startswith("–°—Ä–µ–¥–Ω"): return "MID"
    if h.startswith("–î–æ–ª–≥–æ"): return "LT"
    return None

years = {"1 –≥–æ–¥":"1y","3 –≥–æ–¥–∞":"3y","5 –ª–µ—Ç":"5y"}[period]

st.divider()
tab1, tab2 = st.tabs(["–ê–Ω–∞–ª–∏–∑", "Backtest"])

with tab1:
    if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        try:
            data = yf.download(ticker, period=years, interval="1d", auto_adjust=False, progress=False)
            data = data.rename(columns=str.title)[["Open","High","Low","Close"]].dropna()
            if len(data) < 80:
                st.error("–ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥.")
            else:
                hz = map_hz(horizon_label)
                if hz is None:
                    rng = data["Close"].rolling(60).agg(["min","max"]).dropna()
                    if len(rng)==0:
                        hz = "MID"
                    else:
                        pos = (data["Close"].iloc[-1] - rng["min"].iloc[-1]) / max(1e-9, (rng["max"].iloc[-1]-rng["min"].iloc[-1]))
                        hz = "LT" if pos > 0.85 or pos < 0.15 else ("MID" if 0.25 < pos < 0.75 else "ST")

                res = decide(data, hz)
                txt = humanize(ticker, hz, res)
                st.markdown(txt)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

with tab2:
    st.subheader("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–æ–Ω (–¥–æ 5 –ª–µ—Ç)")
    colb1, colb2, colb3 = st.columns(3)
    with colb1:
        bt_hz_label = st.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç (–±—ç–∫—Ç–µ—Å—Ç)", 
            ["–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ–∫ (1‚Äì10 –¥–Ω.)","–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (2‚Äì8 –Ω–µ–¥.)","–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å.)"])
    with colb2:
        capital = st.number_input("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª, $", 10000, 10000000, 100000, step=10000)
    with colb3:
        risk = st.slider("–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É", 0.2, 5.0, 1.0, step=0.2) / 100.0

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å Backtest"):
        try:
            data = yf.download(ticker, period=years, interval="1d", auto_adjust=False, progress=False)
            data = data.rename(columns=str.title)[["Open","High","Low","Close"]].dropna()
            hz = map_hz(bt_hz_label)
            eq, tr = run_backtest(data, hz, capital, risk)
            if eq is None or eq.empty:
                st.info("–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.")
            else:
                st.line_chart(eq, y="equity")
                st.write(f"–°–¥–µ–ª–∫–∏: {len(tr)}")
                if not tr.empty:
                    st.dataframe(tr)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

st.caption("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç. –ü—Ä–æ–¥—É–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π, –ª–æ–≥–∏–∫–∞ —Å–∫—Ä—ã—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞.")
